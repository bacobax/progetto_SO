# Query: printf
# ContextLines: 1

210 results - 16 files

src/dump.c:
   75      
   76:     fprintf(fp, "DAY: %d:üö¢ %d %s %d|%d %s Porto %d\n", *day, idxNave, (carico ? "‚è™Ô∏è" : "‚è©Ô∏è"), ton, tipoMerce, (carico ? "‚è™Ô∏è" : "‚è©Ô∏è"), idxPorto);
   77  

  146      if (!refilling) {
  147:         fprintf(fp, "DUMP: %s IDX: %d, %s %d\n", (where == PORT ? "PORT" : "NAVE"),idx , (quantity <0 ? "tolgo" : "aggiungo") ,(quantity<0 ? -1 * quantity : quantity) );
  148      }

  220  void signalHandler(int s){
  221:     printf("NON FACCIO NULLA DUMP\n");
  222      return;

  262      
  263:     printf("Scrivo nel logifle %d\n", day);
  264      fp = fopen("./logs/logfile.log", "a+");

  269      if (day < so_days) {
  270:     fprintf(fp, "------------------Day %d -----------------\n", day);
  271          

  273      else {
  274:             fprintf(fp, "------------------STATO FINALE -----------------\n");
  275  

  284      for (i = 0; i < so_merci; i++) {
  285:         fprintf(fp, "Tipo merce %d:\n", i);
  286:         fprintf(fp, "\t- Non scaduta:\n");
  287:         fprintf(fp, "\t\ta) nei porti: %d\n", types[i].goods_on_port);
  288:         fprintf(fp, "\t\tb) in nave: %d\n", types[i].goods_on_ship);
  289:         fprintf(fp, "\t- Scaduta:\n");
  290:         fprintf(fp, "\t\ta) nei porti: %d\n", types[i].expired_goods_on_port);
  291:         fprintf(fp, "\t\tb) in nave: %d\n", types[i].expired_goods_on_ship);
  292:         fprintf(fp, "\t- Consegnata: %d\n" ,  types[i].delivered_goods);
  293          expiredGoodsOnShips += types[i].expired_goods_on_ship;

  319          varianza = dump->expTimeVariance / (so_porti * so_days * so_merci);
  320:         fprintf(fp, "Tempo di vita medio della merce: %.3f\n", media);
  321:         fprintf(fp, "Varianza tempo della merce: %.3f\n", varianza);
  322:         fprintf(fp, "Coefficente di variazione tempo della merce: %.3f%%\n", (varianza/media)*100);
  323:         fprintf(fp, "SO_DAYS: %d\n", so_days);
  324:         fprintf(fp, "Merce rimasta in porto: %d\n", notExpiredGoodsOnPorts);
  325:         fprintf(fp,"Merce rimasta in nave: %d\n" , notExpiredGoodsOnShips);
  326:         fprintf(fp, "Merce scaduta in porto: %d\n" , expiredGoodsOnPorts);
  327:         fprintf(fp, "Merce scaduta in nave: %d\n" , expiredGoodsOnShips);
  328:         fprintf(fp, "Merce consegnata: %d (%.4f%% di SO_FILL)\n" , deliveredGoods,((double)( deliveredGoods* 100))/so_fill);
  329:         fprintf(fp, "Tempo di viaggio medio viaggio tra porti: %f\n", mediaTempoViaggioFraPorti());
  330:         fprintf(fp, "Tempo medio scaricamento di lotti: %f\n", (dump->tempoScaricamentoTot)/((double)(so_porti * so_days * so_merci)));
  331          /*

  335  
  336:         fprintf(fp, "TOTALE MERCE: %d <==> IN GIOCO: %d\n", sum, merceRefillata);
  337          if (sum ==  merceRefillata) {
  338:             fprintf(fp, "‚úÖ");
  339          }
  340          else {
  341:             fprintf(fp, "‚ùå");   
  342          }

  352      if(last){
  353:         
  354          mutex(waitToRemoveDumpKey, LOCK, errorHandler, "LOCK in waitToRemoveDumpID");

  380  
  381:     fprintf(fp, "[%d]Nave: %s\n", shipID, msg);
  382  

src/master.c:
   49:     fprintf(fp,"Quantit√† primo giorno: %d\n" , quantitaPrimoGiorno);
   58:     fprintf(fp,"M: Finito generazione\n");
   64:     printf("PID MASTER: %d, press any number to continue\n", getpid());
   70:     fprintf(fp,"‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ\n");
   77:             fprintf(meteoPipe, "%d\n", *day);
   80:             fprintf(fp,"MASTER: DAY: %d\n", *day);
   81:             fprintf(fp,"Master: dormo\n");
   98:             fprintf(fp,"Terminazione simulazione per navi morte\n");
  102:     fprintf(meteoPipe, "%d\n", EOF);
  104:     fprintf(fp,"Master, faccio la pclose\n");
  109:     fprintf(fp,"ENTRO\n");
  111:     fprintf(fp,"SPACCO\n");
  115:     fprintf(fp,"CIAO\n");

src/meteo.c:
   44:             printf("METEO: nave vittima per malestorm:%d\n", victimIdx);
   46:             printf("Tra %d ore killo la nave %d\n", so_malestorm, victim);
   47:             printf("ASPETTO %f secondi\n", ((double)(0.04166667 * NANOS_MULT) * so_malestorm));
   56:             printf("PID VITTIMA %d\n", victimShip->pid);
   69:             printf("MALESTORM: Ho rimosso tutte le navi\n");
  155:     printf("Meteo chekInConfig finita...\n");
  166:     printf("Meteo partito...\n");
  173:         printf("Giorno %d\n", day);
  180:     printf("Meteo: termino\n");

src/nave.c:
   33:     printf("[%d]Nave tipi da caricare: \n", ship->shipID);
   37:     printf("[%d]Nave, controllo se ha senso continuare-day: %d\n", ship->shipID,*day);
   46:             printf("üíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄ\n");
   47:             printf("Nave con id:%d NON HA PI√ô SENSO CONTINUARE\n", ship->shipID);
   48:             printf("üíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄ\n");
   76:         printf("aviable ports: %d\n", availablePorts);
   94:             printf("[%d]Nave: Sono partita...\n", ship->shipID);
  153:         printf("[%d]Nave ho scelto per scaricare: %d\n", ship->shipID,product_index);
  160:             printf("Prodotto NULL\n");

src/porto.c:
  42:             printf("[%d] PORTO UCCIDO TUTTI I FIGLI\n", idx);
  45:             printf("[%d]PORTO TERMINO\n", idx);

test/test.c:
  124:     printf("Il miglior porto √® il porto %d\n", idx);
  137:     printf("Inserire quantit√†: ");
  139:     printf("Inserire parti: ");
  159:     printf("%d\n", *shmAddr);
  168:     printf("Creato il semaforo\n");
  223:     printf("DAY: %d\nQUANITY: %d\n", day, quantity);
  235:         printf("%d, ", arr[i]);
  238:     printf("\n");
  254:     printf("indice del vettore: ");
  259:     printf("vettore in posizione %d = matrice in posizione[%d][%d]\n", idx, i, j);
  269:     printf("Chiave del set e idx semaforo: ");
  273:     printf("FACCIO LA SEM GET\n");
  283:         printf("\nNumero di px in attesa: %d\n", n);
  294:     printf("Vuoi usare ftok? ");
  297:         printf("Inserire nome file:\n");
  299:         printf("Nome file: %s\n", text);
  300:         printf("Inserire id: \n");
  303:         printf("\nkey = %d\n", key);
  306:         printf("Chiave della coda: ");
  316:         printf("Vuoi leggere un messaggio? [0/1]\n");
  318:         printf("\n");
  322:             printf("TIPO: %ld\n", messaggioRicevuto->mtype);
  323:             printf("TESTO: '%s'\n", messaggioRicevuto->mtext);
  333:     printf("Lenght della lista:%d && Carico trasportato:\n", list->length);
  337:             printf("Nodo:%d - address:%d il mio next e'->:NULL\n", i, node);
  339:             printf("Nodo:%d - address:%d il mio next e'->:%d\n", i, node, node->next);
  341:         printf("product_type:%d weight:%d expirationTime:%d distributionDay:%d portId:%d\n\n", node->product_type, node->weight, node->expirationTime, node->distributionDay, node->portID);
  345:     printf("--------------------------------------------------\n");
  349:     printf("Nave id:%d e weight:%d\n", ship->shipID, ship->weight);
  358:     printf("ship inizializzata...\n");
  450:     printf("Variabile: %d\n", res);
  476:     printf("Scegli il test da fare: ");

utils/errorHandler.c:
  33:     printf("‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå HASH %d\n", hash);
  39:     fprintf(fp, "üí•üí•üí•üí•üí•üí•üí•üí•\n");
  40:     fprintf(fp, "ERROR: %s error handler\nERRNO: %s\nCTX: %s\nHASH: %d\n", myerr, strerror(errno), errCtx, hash);
  41:     fprintf(fp, "üí•üí•üí•üí•üí•üí•üí•üí•\n");

utils/loadShip.c:
   38:             printf("PRODOTTO NULLO\n");
   55:         /*sprintf(text, "ship->loadship->last->weight = %d\n", ship->loadship->last->weight );*/
   70:         printf("IMPOSSIBILE AGGIUNGERE PRODOTTO SO_CAPACITY MASSIMA!\n");
  112:         printf("INDEX NON VALIDO PER RIMUOVERE IL PRODOTTO\n");
  116:     printf("index del prodotto da rimuovere:%d\n", index);
  130:         printf("vogio rimuovere l'ultimo, i:%d\n", index);
  161:     printf("PRODOTTO NON TROVATO NELLA LISTA PER ESSERE RIMOSSO\n");
  168:     fprintf(stream, "[ ");
  171:         fprintf(stream, "product_type:%d weight:%d expiration_time:%d dd:%d portID: %d, \n",aux->product_type, aux->weight, aux->expirationTime, aux->distributionDay, aux->portID);
  174:     fprintf(stream, " ]\n");

utils/master_utility.c:
   32              char s[50];
   33:             sprintf(s, "%d", i);
   34              argv[0] = "nave";

   37              fp = fopen("./logs/exitShipLog.log", "a+");
   38:             fprintf(fp,"[%d]Nave IDX %d: creata\n",getpid(),i);
   39              fclose(fp);

   70          if (pid == 0) {
   71:             printf("PORTO %d: %d\n",i, getpid());
   72              quantity = (int*)malloc(sizeof(int));

   74              quantity = intElementAt(quantiesSupplies, i);
   75:             sprintf(strQuantitySupply, "%d", *quantity);
   76              
   77              quantity = intElementAt(quantiesRequests, i);
   78:             sprintf(strQuantityRequest, "%d", *quantity);
   79              

   82  
   83:             sprintf(strIdx, "%d", i);
   84  

   99          }
  100:         printf("Generato porto %d\n", i);
  101      }
  102:     printf("M: libero la lista\n"); /*! da fixare, come mai non la stampa??? */
  103      intFreeList(quantiesSupplies);

  116  void mastersighandler(int s) {
  117:     printf("Master kill signal per√≤ non faccio nulla\n");
  118      return;

  140          shmid = createShm(ftok_val, sizeof(struct port), errorHandler, "creaShmPorti");
  141:         printf("MASTER HO CREATO LA SHM PER IL PORTO:%d\n", i);
  142:         // sprintf(text, "key generata da ftok:%d per il porto:%d", ftok_val, i);
  143          // throwError(text, "crea shm porti");

  275      masterCode(startSimulationSemID, portsShmid, shipsShmid, reservePrintSem, waitconfigSemID, msgRefillerID, waitEndDaySemID, day, waitEndDayShipSemID);
  276:     printf("SETTATO A 1 TERMINATE VALUE, ASPETTO FIGLI...\n");
  277  

  280      mutex(waitPortsSemID, WAITZERO, errorHandler, "master mutex WAITZERO on ports");
  281:     printf("FACCIO IL PRINT DEL DUMP DEL %d ESIMO GIORNO\n", so_days);
  282      printDump(SYNC , *day, 1);
  283:     printf("MASTER: FACCIO LA WAITZERO...\n");
  284      mutex(waitToRemoveDump, WAITZERO, errorHandler, "mutex waitzero remove dump");
  285:     printf("MASTER: HO PASSATO LA WAITZERO...\n");
  286      lockAllGoodsDump();
  287:     printf("master sono ancora vivo dopo kill\n");
  288      removeSem(startSimulationSemID, errorHandler, "startSimulationSemID");

  303      removeSem(waitEndDayShipSemID, errorHandler, "waitEndDayShipSemID");
  304:     printf("master tutti i sem sono stati rimoessi\n");
  305  

  313      removeDumpArea();
  314:     printf("master tutte le shm sono state rimosse\n");
  315  
  316      removeQueue(msgRefillerID, errorHandler, "msgRefillerID");
  317:     printf("coda di refiller rimossa\n");
  318      
  319:     printf("Master, ho rimosso tutto\n");
  320      removeErrorHandler();

  327      for (i = 0; i < l->length; i++) {
  328:         sprintf(supportText, "%d|%d", giorno, *(intElementAt(l, i)));
  329          type = i + 1;
  330          /*
  331:         printf("Invio messaggio alla coda %d con il seguente testo: %s con tipo %ld\n", msgRefillerID, supportText, type);
  332  

  399      semShipID = useSem(SEMSHIPKEY, errorHandler, "childExpireShipCode");
  400:     printf("EXPIRER PID: %d\n" , getpid());
  401      logShip(ship->shipID, "expirer nave FACCIO LOCK semShipID");

utils/msg_utility.c:
   81:         fprintf(stderr, "mod must be SYNC or ASYNC\n");
  129:         fprintf(stderr, "mod must be SYNC or ASYNC\n");
  193:     printf("CODA %d: {\n\tDIM: %lu bytes\n\tN_MEX: %lu\n\tTIMESTAMP msgsnd: %s\n}\n", id, buf.msg_qbytes, buf.msg_qnum, ctime(&buf.msg_stime));

utils/port_utility.c:
   24:     printf("refiller: ricevuto segnale di terminazione\n");
  153:     fprintf(stream, "[%d]Risorse porto %d:\n", getpid(), idx);
  154:     fprintf(stream, "DOMANDE:\n");
  157:         fprintf(stream,"%d, \n", reqs[i]);
  163:     fprintf(stream,"coords:\n");
  164:     fprintf(stream, "x: %f\n", p->x);
  165:     fprintf(stream,"y: %f\n",  p->y);
  167:     fprintf(stream ,"______________________________________________\n");
  343:     printf("P: finito configurazione\n");
  563:             printf("PORTO: tolgo %d\n" ,quantity);
  605:     fprintf(fp, "Porti interessati da mareggiata: %d\n" , countPortsWhere(caughtBySwell));
  609:         fprintf(fp, "Porto %d:\n", i);
  610:         fprintf(fp, "Banchine occupate totali: %d\n", so_banchine - getOneValue(semPierID, i));
  611:         fprintf(fp, "Merci ricevute: %d\n", port[i].deliveredGoods);
  612:         fprintf(fp, "Merci spedite: %d\n", port[i].sentGoods);
  645:         printf("Porto %d, non sono stato scelto anche se avevo trovato della rob\n", myPortIdx);
  647:         printf("PORTO %d: riaggiungo %d\n" , myPortIdx, quantity);

utils/sem_utility.c:
  195:     printf("FACCIO LA CTL\n");
  206:         printf("------------\n");
  207:         printf("VAL SEM IDX %d: %d\n", i, arg.array[i]);
  208:         printf("WAITING PX IDX %d: %d\n" , i, v2[i]);
  209:         printf("WAITING ZERO PX IDX %d: %d\n" , i, v[i]);
  210:         printf("------------\n");

utils/ship_utility.c:
   117:     printf("PID assegnato:%d alla nave con id:%d\n", ship->pid, shipID);
   132:             printf("\nProduct type:%d, Expiration time: %d, Weight: %d", products[i].product_type, products[i].expirationTime, products[i].weight);
   136:     printf("\n");
   148:     fprintf(fp,"[%d]: Nave\n", ship->shipID);
   150:     fprintf(fp,"coords: [x:%f, y:%f]\n", (ship->x), (ship->y));
   152:     fprintf(fp,"ton trasportati:%d\n", ship->weight);
   154:     fprintf(fp,"valore di storm: %d\n", ship->storm);
   157:     printf("promised product type:%d, exp.time:%d, weight;%d", ship->promisedProduct.product_type, ship->promisedProduct.expirationTime, ship->promisedProduct.weight);
   160:     fprintf(fp,"carico trasportato:\n");
   163:     fprintf(fp, "______________________________________________\n");
   166:         fprintf(fp, "‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå\n");
   179:     fprintf(fp,"[%d]Nave: faccio la lock\n", getpid());
   182:     fprintf(fp,"[%d]Nave: uscita\n", getpid());
   250:     sprintf(text, "BEST QUANTITY: %d" , cap );
   330:     sprintf(text, "%d %d", quantityToCharge , ship->shipID); 
   333:         printf("[%d]Nave: invio domanda al porto %d per caricare\n", ship->shipID, i);
   338:         printf("[%d]Nave risposta dal porto %d: %s\n", ship->shipID, i, response->mtext);
   428:             printf("Nave con id:%d: ho trovato porto %d in cui fare scarico\n", ship->shipID, i);
   440:     printf("[%d]Nave: ho scelto il porto %d per scaricare\n", ship->shipID, portID);
   492:             sprintf(mex, "1");
   497:             sprintf(mex, "0");
   539:             printf("‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è\n[%d]Nave: rallentata %d ore in pi√π perch√® c'√® mareggiata\n‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è‚öìÔ∏è
   554:         printf("\nOOPS! [%d]Nave: la merce che volevo caricare √® scaduta!!!\n", ship->shipID);
   679:     printf("sono dentro isScadutaProduct, sto per gare getPort l'id vale:%d\n", prod->portID);
   714:     printf("[%d]Nave: viaggio per %f secondi...\n", ship->shipID, tempoInSecondi);
   717:         printf("[%d]Nave: non avrei abbastanza giorni per raggiungere il porto: %d, termino...\n", ship->shipID, portID);
   727:         printf("üå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏è\n[%d]Nave: ho beccato una tempesta\nüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏èüå™Ô∏è\n", ship->shipID);
   734:         printf("üåäüåäüåäüåäüåäüåä\n[%d]Nave: sono stata uccisa\nüåäüåäüåäüåäüåäüåä\n", ship->shipID);
   737:     printf("[%d]Nave: viaggio finito...\n", ship->shipID);
   781:         printf("[%d]Nave: non avrei abbastanza giorni per raggiungere il porto: %d, termino...\n", ship->shipID, portID);
   804:         printf("üåäüåäüåäüåäüåäüåä\n[%d]Nave: sono stata uccisa\nüåäüåäüåäüåäüåäüåä\n", ship->shipID);
   891:     fprintf(fp, "Numero di nave in mare senza carico:%d\n", countShipWhere(ships, weigthMinoreDiZero));
   892:     fprintf(fp, "Numero di navi in mare con carico a bordo:%d\n", countShipWhere(ships, weigthMaggioreDiZero));
   893:     fprintf(fp, "Numero di navi in porto che stanno facendo operazioni di carico/scarico:%d\n", shipsInPorts);
   894:     fprintf(fp, "Numero di navi rallentate a causa delle tempeste: %d\n", countShipWhere(ships, caughtByStorm));
   895:     fprintf(fp, "Numero di navi affondate:%d\n", countShipWhere(ships, isDead));
   942:         printf("üåäüåäüåäüåäüåäüåä\n[%d]Nave: sono stata uccisa\nüåäüåäüåäüåäüåäüåä\n", ship->shipID);
  1000:                 printf("Porto %d colpito da una mareggiata, devo aspettare %d ore in pi√π\n" , portID, so_swell_duration);
  1004:             printf("Scarico: %d, p.weight: %d\n", scarico, p->weight);
  1035:     printf("new product index: %d\n", product_index);

utils/supplies.c:
  80:     fprintf(stream, "SUPPLIES:\n");
  83:         fprintf(stream,"GIORNO %d: [ ", i);
  85:             fprintf(stream,"%d, ", getMagazineVal(magazine,i,j));
  87:         fprintf(stream,"]\n");
  90:     fprintf(stream,"EXP TIMES:\n[");
  95:         fprintf(stream,"%d, ", expTimes[i]);
  98:     fprintf(stream, "]\n");
  99:     fprintf(stream,"--------------------------------------\n");

utils/support.c:
  24:     printf("Porto: ricevuto segnale di terminazione non faccio null\n");

utils/vettoriInt.c:
  48:     printf("[ ");
  50:         printf("%d , ", aux->numero);
  53:     printf(" ]\n");
